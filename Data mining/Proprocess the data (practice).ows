<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script" position="(123.0, 219.0)" />
		<node id="1" name="Preprocess" qualified_name="Orange.widgets.data.owpreprocess.OWPreprocess" project_name="Orange3" version="" title="Preprocess" position="(424.0, 286.0)" />
		<node id="2" name="Unique" qualified_name="Orange.widgets.data.owunique.OWUnique" project_name="Orange3" version="" title="Unique" position="(328.0, 347.0)" />
		<node id="3" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table" position="(301.0, 148.0)" />
		<node id="4" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table (1)" position="(578.0, 252.0)" />
		<node id="5" name="Edit Domain" qualified_name="Orange.widgets.data.oweditdomain.OWEditDomain" project_name="Orange3" version="" title="Edit Domain" position="(222.0, 311.0)" />
		<node id="6" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (1)" position="(116.0, 524.0)" />
		<node id="7" name="Preprocess" qualified_name="Orange.widgets.data.owpreprocess.OWPreprocess" project_name="Orange3" version="" title="Preprocess (1)" position="(417.0, 591.0)" />
		<node id="8" name="Unique" qualified_name="Orange.widgets.data.owunique.OWUnique" project_name="Orange3" version="" title="Unique (1)" position="(321.0, 652.0)" />
		<node id="9" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table (2)" position="(294.0, 453.0)" />
		<node id="10" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table (1) (1)" position="(552.0, 561.0)" />
		<node id="11" name="Edit Domain" qualified_name="Orange.widgets.data.oweditdomain.OWEditDomain" project_name="Orange3" version="" title="Edit Domain (1)" position="(215.0, 616.0)" />
		<node id="12" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (2)" position="(712.0, 296.0)" />
		<node id="13" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table (3)" position="(776.0, 420.0)" />
		<node id="14" name="Concatenate" qualified_name="Orange.widgets.data.owconcatenate.OWConcatenate" project_name="Orange3" version="" title="Concatenate" position="(724.0, 550.0)" />
		<node id="15" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table (4)" position="(893.0, 510.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="3" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="1" source_node_id="2" sink_node_id="1" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="2" source_node_id="1" sink_node_id="4" source_channel="Preprocessed Data" sink_channel="Data" enabled="true" />
		<link id="3" source_node_id="0" sink_node_id="5" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="4" source_node_id="5" sink_node_id="2" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="5" source_node_id="6" sink_node_id="9" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="6" source_node_id="8" sink_node_id="7" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="7" source_node_id="7" sink_node_id="10" source_channel="Preprocessed Data" sink_channel="Data" enabled="true" />
		<link id="8" source_node_id="6" sink_node_id="11" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="9" source_node_id="11" sink_node_id="8" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="10" source_node_id="4" sink_node_id="12" source_channel="Selected Data" sink_channel="Data" enabled="true" />
		<link id="11" source_node_id="12" sink_node_id="13" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="12" source_node_id="10" sink_node_id="14" source_channel="Selected Data" sink_channel="Additional Data" enabled="true" />
		<link id="13" source_node_id="13" sink_node_id="14" source_channel="Selected Data" sink_channel="Additional Data" enabled="true" />
		<link id="14" source_node_id="14" sink_node_id="15" source_channel="Data" sink_channel="Data" enabled="true" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 4, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00-\x00\x00\x05\x9f\x00\x00\x03\xb0\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03N', 'scriptLibrary': [{'name': 'get week', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\ndf= table_to_frame(in_data)\n#df = df.drop_duplicates(keep='first')\ndf['week'] = df['date'].dt.isocalendar().week\n#here you go\nout_data = table_from_frame(df)", 'filename': None}, {'name': 'elbow', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\ndf= table_to_frame(in_data)\n#df = df.drop_duplicates(keep='first')\ndf['week'] = df['date'].dt.isocalendar().week\n#here you go\nout_data = table_from_frame(df)", 'filename': None}, {'name': 'warehouse', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\n\nretail= table_to_frame(in_data)\n\nretail['CustomerID'] = retail['CustomerID'].astype(str)\nretail['Amount'] = retail['Quantity']*retail['UnitPrice']\n\nrfm_m = retail.groupby('CustomerID')['Amount'].sum()\nrfm_m = rfm_m.reset_index()\nrfm_f = retail.groupby('CustomerID')['InvoiceNo'].count()\nrfm_f = rfm_f.reset_index()\nrfm_f.columns = ['CustomerID', 'Frequency']\n\nrfm = pd.merge(rfm_m, rfm_f, on='CustomerID', how='inner')\n\nretail['InvoiceDate'] = pd.to_datetime(retail['InvoiceDate'],format='%d-%m-%Y %H:%M')\n\nmax_date = max(retail['InvoiceDate'])\nretail['Diff'] = max_date - retail['InvoiceDate']\nrfm_p = retail.groupby('CustomerID')['Diff'].min()\nrfm_p = rfm_p.reset_index()\nrfm_p['Diff'] = rfm_p['Diff'].dt.days\nrfm = pd.merge(rfm, rfm_p, on='CustomerID', how='inner')\nrfm.columns = ['CustomerID', 'Amount', 'Frequency', 'Recency']\n#here you go\nout_data = table_from_frame(rfm)", 'filename': None}, {'name': 'warehouse2', 'script': "\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import combinations \nfrom sklearn.cluster import KMeans\nimport folium\n\ndata= table_to_frame(in_data)\n# Color options\ncolor_options = {'demand': 'red',\n                 'supply': 'yellow',\n                 'flow': 'black',\n                 'cog': 'blue',\n                 'candidate': 'black',\n                 'other': 'gray'}\n\ndef fun1(x):\n    if x == 'Supply':\n        return 1.0\n    elif x == 'Demand':\n        return 2.0\n    else:\n        return 0\n \ndata['a1'] = data['type'].apply(fun1).astype(np.int64)\ndata['a2'] = data['volume'].astype(np.int64)\n \ndata['cal_vol'] = data['a1']*data['a2']\ndata=data.drop(['a1','a2'], axis=1)\n\ncands = data.loc[data['type'].str.lower()=='candidate']\nlocs = data.loc[data['cal_vol']&gt;0]\n\nprint(cands)\n#print(locs)\nout_data = table_from_frame(data)", 'filename': None}, {'name': 'New script', 'script': 'from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport pandas as pd\nimport random\nfrom random import randint\nimport datetime\n\n#table= table_to_frame(df)\nsalespersons=[\'john\',\'peter\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'adam\',\'mike\',\'joe\',\'joe\',\'joe\',\'frank\',\'frank\',\'paul\']\nproducts= [\n           {"name":"p1","price":100},\n           {"name":"p2","price":150},\n           {"name":"p3","price":200},\n           {"name":"p4","price":200},\n           {"name":"p5","price":150},\n           {"name":"p6","price":300},\n           {"name":"p7","price":400},\n           {"name":"p8","price":500},\n           {"name":"p9","price":600},\n           {"name":"p10","price":1000}\n           ]\nlocations= [\'BKK\',\'Bangkok\',\'bkk\',\'Phuket\',\'PHUKET\',None]\nlist = []\nfor tran_id in range(1,10000+1):\n    cust_id     = random.randrange(1, 100+1)\n    p_idx       = random.randrange(0,10)\n    product_id  = products[p_idx]["name"]\n    price       = products[p_idx]["price"]\n    location    = random.choice(locations)\n    date        = datetime.date(randint(2022,2022), randint(1,3),randint(1,28))\n    if date.month ==1:\n        maxqty  = 2\n        saleperson  = random.choice(salespersons[0:8])\n    elif date.month ==2:\n        maxqty  = 6\n        saleperson  =  random.choice(salespersons[9:10])\n    else:\n        maxqty  = 4\n        saleperson  =  random.choice(salespersons[11:16])\n    qty         = random.randrange(1,maxqty+1)\n     \n    tran = {\n            "tran_id":tran_id,\n            "cust_id":cust_id,\n            "product_id":product_id,\n            "qty":qty,\n            "price":price,\n            "location":location,\n            "date":date,\n            "saleperson":saleperson\n    }\n    list.append(tran)\n\ndup_index = range(1,100)\nfor idx in dup_index:\n    i = random.randrange(1,10000)\n    list.append(list[i])\ndf = pd.DataFrame.from_dict(list)\n#print(df.head())\n \n\nout_data = table_from_frame(df)', 'filename': None}], 'scriptText': 'from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport pandas as pd\nimport random\nfrom random import randint\nimport datetime\n\n#table= table_to_frame(df)\nsalespersons=[\'john\',\'peter\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'adam\',\'mike\',\'joe\',\'joe\',\'joe\',\'frank\',\'frank\',\'paul\']\nproducts= [\n           {"name":"p1","price":100},\n           {"name":"p2","price":150},\n           {"name":"p3","price":200},\n           {"name":"p4","price":200},\n           {"name":"p5","price":150},\n           {"name":"p6","price":300},\n           {"name":"p7","price":400},\n           {"name":"p8","price":500},\n           {"name":"p9","price":600},\n           {"name":"p10","price":1000}\n           ]\nlocations= [\'BKK\',\'Bangkok\',\'bkk\',\'Phuket\',\'PHUKET\',None]\nlist = []\nfor tran_id in range(1,10000+1):\n    cust_id     = random.randrange(1, 100+1)\n    p_idx       = random.randrange(0,10)\n    product_id  = products[p_idx]["name"]\n    price       = products[p_idx]["price"]\n    location    = random.choice(locations)\n    date        = datetime.date(randint(2022,2022), randint(1,3),randint(1,28))\n    if date.month ==1:\n        maxqty  = 2\n        saleperson  = random.choice(salespersons[0:8])\n    elif date.month ==2:\n        maxqty  = 6\n        saleperson  =  random.choice(salespersons[9:10])\n    else:\n        maxqty  = 4\n        saleperson  =  random.choice(salespersons[11:16])\n    qty         = random.randrange(1,maxqty+1)\n     \n    tran = {\n            "tran_id":tran_id,\n            "cust_id":cust_id,\n            "product_id":product_id,\n            "qty":qty,\n            "price":price,\n            "location":location,\n            "date":date,\n            "saleperson":saleperson\n    }\n    list.append(tran)\n\ndup_index = range(1,100)\nfor idx in dup_index:\n    i = random.randrange(1,10000)\n    list.append(list[i])\ndf = pd.DataFrame.from_dict(list)\n#print(df.head())\n \n\nout_data = table_from_frame(df)', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x02\r\x00\x00\x00k\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="1" format="literal">{'autocommit': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00-\x00\x00\x05\x9f\x00\x00\x03\xb0\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03N', 'storedsettings': {'name': '', 'preprocessors': [('orange.preprocess.impute', {'method': 2})]}, '__version__': 2}</properties>
		<properties node_id="2" format="pickle">gASVnQEAAAAAAAB9lCiMCmF1dG9jb21taXSUiIwSY29udHJvbEFyZWFWaXNpYmxllIiME3NhdmVk
V2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAAAAAAAAAZAAAFnwAAA04AAAAAAAAALQAABZ8AAAOw
AAAAAAIAAAAFoAAAAAAAAAA1AAAFnwAAA06UjAp0aWVicmVha2VylIwNTGFzdCBpbnN0YW5jZZSM
C19fdmVyc2lvbl9flEsBjBBjb250ZXh0X3NldHRpbmdzlF2UjBVvcmFuZ2V3aWRnZXQuc2V0dGlu
Z3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojA1zZWxlY3RlZF92YXJzlF2UjAdjdXN0
X2lklEtmhpRhSv3///+GlGgHSwF1jAphdHRyaWJ1dGVzlH2UKIwHdHJhbl9pZJRLAmgTSwKMCnBy
b2R1Y3RfaWSUSwGMA3F0eZRLAowFcHJpY2WUSwKMCGxvY2F0aW9ulEsBjARkYXRllEsEjApzYWxl
cGVyc29ulEsBdYwFbWV0YXOUfZR1YmF1Lg==
</properties>
		<properties node_id="3" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="4" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="5" format="pickle">gASV4AMAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZlZFdpZGdldEdlb21ldHJ5
lENCAdnQywADAAAAAAE2AAAAeQAAA8kAAAKpAAABNgAAAJUAAAPJAAACqQAAAAAAAAAABaAAAAE2
AAAAlQAAA8kAAAKplIwLX192ZXJzaW9uX1+USwKMEGNvbnRleHRfc2V0dGluZ3OUXZSMFW9yYW5n
ZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMFF9kb21haW5f
Y2hhbmdlX3N0b3JllH2UKIwEUmVhbJQojAdDbHVzdGVylEsAjAFmlIaUKYl0lIaUXZQojA1Bc0Nh
dGVnb3JpY2FslCmGlIwRQ2F0ZWdvcmllc01hcHBpbmeUXZQojAMwLjCUjAJnMZSGlIwDMS4wlIwC
ZzKUhpSMAzIuMJSMAmczlIaUjAMzLjCUjAJnNJSGlIwDNC4wlIwCZzWUhpRlhZSGlGWMC0NhdGVn
b3JpY2FslCiMCGxvY2F0aW9ulCiMA0JLS5SMB0Jhbmdrb2uUjAZQSFVLRVSUjAZQaHVrZXSUjANi
a2uUdJQpiXSUhpRdlIwRQ2F0ZWdvcmllc01hcHBpbmeUXZQojANCS0uUjAdCYW5na29rlIaUjAdC
YW5na29rlIwHQmFuZ2tva5SGlIwGUEhVS0VUlIwGUGh1a2V0lIaUjAZQaHVrZXSUjAZQaHVrZXSU
hpSMA2Jra5SMB0Jhbmdrb2uUhpRlhZSGlGGMC0NhdGVnb3JpY2FslCiMCGxvY2F0aW9ulCiMA0JL
S5SMB0Jhbmdrb2uUjAZQSFVLRVSUjAZQaHVrZXSUjANia2uUdJQpiHSUhpRdlIwRQ2F0ZWdvcmll
c01hcHBpbmeUXZQoaEyMB0Jhbmdrb2uUhpRoTYwHQmFuZ2tva5SGlGhOjAZQaHVrZXSUhpRoT4wG
UGh1a2V0lIaUaFCMB0Jhbmdrb2uUhpRlhZSGlGF1Sv7///+GlIwWX21lcmdlX2RpYWxvZ19zZXR0
aW5nc5R9lEr8////hpSMDl9zZWxlY3RlZF9pdGVtlIwIbG9jYXRpb26USwCGlEr+////hpSMEW91
dHB1dF90YWJsZV9uYW1llIwAlEr+////hpRoBEsCdYwKYXR0cmlidXRlc5R9lCiMB3RyYW5faWSU
SwKMB2N1c3RfaWSUSwKMCnByb2R1Y3RfaWSUSwGMA3F0eZRLAowFcHJpY2WUSwJoaEsBjARkYXRl
lEsEjApzYWxlcGVyc29ulEsBdYwFbWV0YXOUfZR1YmF1Lg==
</properties>
		<properties node_id="6" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 4, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00-\x00\x00\x05\x9f\x00\x00\x03\xb0\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03N', 'scriptLibrary': [{'name': 'get week', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\ndf= table_to_frame(in_data)\n#df = df.drop_duplicates(keep='first')\ndf['week'] = df['date'].dt.isocalendar().week\n#here you go\nout_data = table_from_frame(df)", 'filename': None}, {'name': 'elbow', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\ndf= table_to_frame(in_data)\n#df = df.drop_duplicates(keep='first')\ndf['week'] = df['date'].dt.isocalendar().week\n#here you go\nout_data = table_from_frame(df)", 'filename': None}, {'name': 'warehouse', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\n\nretail= table_to_frame(in_data)\n\nretail['CustomerID'] = retail['CustomerID'].astype(str)\nretail['Amount'] = retail['Quantity']*retail['UnitPrice']\n\nrfm_m = retail.groupby('CustomerID')['Amount'].sum()\nrfm_m = rfm_m.reset_index()\nrfm_f = retail.groupby('CustomerID')['InvoiceNo'].count()\nrfm_f = rfm_f.reset_index()\nrfm_f.columns = ['CustomerID', 'Frequency']\n\nrfm = pd.merge(rfm_m, rfm_f, on='CustomerID', how='inner')\n\nretail['InvoiceDate'] = pd.to_datetime(retail['InvoiceDate'],format='%d-%m-%Y %H:%M')\n\nmax_date = max(retail['InvoiceDate'])\nretail['Diff'] = max_date - retail['InvoiceDate']\nrfm_p = retail.groupby('CustomerID')['Diff'].min()\nrfm_p = rfm_p.reset_index()\nrfm_p['Diff'] = rfm_p['Diff'].dt.days\nrfm = pd.merge(rfm, rfm_p, on='CustomerID', how='inner')\nrfm.columns = ['CustomerID', 'Amount', 'Frequency', 'Recency']\n#here you go\nout_data = table_from_frame(rfm)", 'filename': None}, {'name': 'warehouse2', 'script': "\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import combinations \nfrom sklearn.cluster import KMeans\nimport folium\n\ndata= table_to_frame(in_data)\n# Color options\ncolor_options = {'demand': 'red',\n                 'supply': 'yellow',\n                 'flow': 'black',\n                 'cog': 'blue',\n                 'candidate': 'black',\n                 'other': 'gray'}\n\ndef fun1(x):\n    if x == 'Supply':\n        return 1.0\n    elif x == 'Demand':\n        return 2.0\n    else:\n        return 0\n \ndata['a1'] = data['type'].apply(fun1).astype(np.int64)\ndata['a2'] = data['volume'].astype(np.int64)\n \ndata['cal_vol'] = data['a1']*data['a2']\ndata=data.drop(['a1','a2'], axis=1)\n\ncands = data.loc[data['type'].str.lower()=='candidate']\nlocs = data.loc[data['cal_vol']&gt;0]\n\nprint(cands)\n#print(locs)\nout_data = table_from_frame(data)", 'filename': None}, {'name': 'New script', 'script': 'from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport pandas as pd\nimport random\nfrom random import randint\nimport datetime\n\n#table= table_to_frame(df)\nsalespersons=[\'john\',\'peter\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'adam\',\'mike\',\'joe\',\'joe\',\'joe\',\'frank\',\'frank\',\'paul\']\nproducts= [\n           {"name":"p1","price":100},\n           {"name":"p2","price":150},\n           {"name":"p3","price":200},\n           {"name":"p4","price":200},\n           {"name":"p5","price":150},\n           {"name":"p6","price":300},\n           {"name":"p7","price":400},\n           {"name":"p8","price":500},\n           {"name":"p9","price":600},\n           {"name":"p10","price":1000}\n           ]\nlocations= [\'BKK\',\'Bangkok\',\'bkk\',\'Phuket\',\'PHUKET\',None]\nlist = []\nfor tran_id in range(1,10000+1):\n    cust_id     = random.randrange(1, 100+1)\n    p_idx       = random.randrange(0,10)\n    product_id  = products[p_idx]["name"]\n    price       = products[p_idx]["price"]\n    location    = random.choice(locations)\n    date        = datetime.date(randint(2022,2022), randint(1,3),randint(1,28))\n    if date.month ==1:\n        maxqty  = 2\n        saleperson  = random.choice(salespersons[0:8])\n    elif date.month ==2:\n        maxqty  = 6\n        saleperson  =  random.choice(salespersons[9:10])\n    else:\n        maxqty  = 4\n        saleperson  =  random.choice(salespersons[11:16])\n    qty         = random.randrange(1,maxqty+1)\n     \n    tran = {\n            "tran_id":tran_id,\n            "cust_id":cust_id,\n            "product_id":product_id,\n            "qty":qty,\n            "price":price,\n            "location":location,\n            "date":date,\n            "saleperson":saleperson\n    }\n    list.append(tran)\n\ndup_index = range(1,100)\nfor idx in dup_index:\n    i = random.randrange(1,10000)\n    list.append(list[i])\ndf = pd.DataFrame.from_dict(list)\n#print(df.head())\n \n\nout_data = table_from_frame(df)', 'filename': None}], 'scriptText': 'from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport pandas as pd\nimport random\nfrom random import randint\nimport datetime\n\n#table= table_to_frame(df)\nsalespersons=[\'john\',\'peter\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'smith\',\'adam\',\'mike\',\'joe\',\'joe\',\'joe\',\'frank\',\'frank\',\'paul\']\nproducts= [\n           {"name":"p1","price":100},\n           {"name":"p2","price":150},\n           {"name":"p3","price":200},\n           {"name":"p4","price":200},\n           {"name":"p5","price":150},\n           {"name":"p6","price":300},\n           {"name":"p7","price":400},\n           {"name":"p8","price":500},\n           {"name":"p9","price":600},\n           {"name":"p10","price":1000}\n           ]\nlocations= [\'BKK\',\'Bangkok\',\'bkk\',\'Phuket\',\'PHUKET\',None]\nlist = []\nfor tran_id in range(1,10000+1):\n    cust_id     = random.randrange(1, 100+1)\n    p_idx       = random.randrange(0,10)\n    product_id  = products[p_idx]["name"]\n    price       = products[p_idx]["price"]\n    location    = random.choice(locations)\n    date        = datetime.date(randint(2022,2022), randint(1,3),randint(1,28))\n    if date.month ==1:\n        maxqty  = 2\n        saleperson  = random.choice(salespersons[0:8])\n    elif date.month ==2:\n        maxqty  = 6\n        saleperson  =  random.choice(salespersons[9:10])\n    else:\n        maxqty  = 4\n        saleperson  =  random.choice(salespersons[11:16])\n    qty         = random.randrange(1,maxqty+1)\n     \n    tran = {\n            "tran_id":tran_id,\n            "cust_id":cust_id,\n            "product_id":product_id,\n            "qty":qty,\n            "price":price,\n            "location":location,\n            "date":date,\n            "saleperson":saleperson\n    }\n    list.append(tran)\n\ndup_index = range(1,100)\nfor idx in dup_index:\n    i = random.randrange(1,10000)\n    list.append(list[i])\ndf = pd.DataFrame.from_dict(list)\n#print(df.head())\n \n\nout_data = table_from_frame(df)', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x02\r\x00\x00\x00k\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="7" format="literal">{'autocommit': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00-\x00\x00\x05\x9f\x00\x00\x03\xb0\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03N', 'storedsettings': {'name': '', 'preprocessors': [('orange.preprocess.impute', {'method': 2})]}, '__version__': 2}</properties>
		<properties node_id="8" format="pickle">gASVnQEAAAAAAAB9lCiMCmF1dG9jb21taXSUiIwSY29udHJvbEFyZWFWaXNpYmxllIiME3NhdmVk
V2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAAAAAAAAAZAAAFnwAAA04AAAAAAAAALQAABZ8AAAOw
AAAAAAIAAAAFoAAAAAAAAAA1AAAFnwAAA06UjAp0aWVicmVha2VylIwNTGFzdCBpbnN0YW5jZZSM
C19fdmVyc2lvbl9flEsBjBBjb250ZXh0X3NldHRpbmdzlF2UjBVvcmFuZ2V3aWRnZXQuc2V0dGlu
Z3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojA1zZWxlY3RlZF92YXJzlF2UjAdjdXN0
X2lklEtmhpRhSv3///+GlGgHSwF1jAphdHRyaWJ1dGVzlH2UKIwHdHJhbl9pZJRLAmgTSwKMCnBy
b2R1Y3RfaWSUSwGMA3F0eZRLAowFcHJpY2WUSwKMCGxvY2F0aW9ulEsBjARkYXRllEsEjApzYWxl
cGVyc29ulEsBdYwFbWV0YXOUfZR1YmF1Lg==
</properties>
		<properties node_id="9" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L', 'select_rows': True, 'selected_cols': None, 'selected_rows': None, 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="10" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="11" format="pickle">gASV4AMAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZlZFdpZGdldEdlb21ldHJ5
lENCAdnQywADAAAAAAE2AAAAeQAAA8kAAAKpAAABNgAAAJUAAAPJAAACqQAAAAAAAAAABaAAAAE2
AAAAlQAAA8kAAAKplIwLX192ZXJzaW9uX1+USwKMEGNvbnRleHRfc2V0dGluZ3OUXZSMFW9yYW5n
ZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMFF9kb21haW5f
Y2hhbmdlX3N0b3JllH2UKIwEUmVhbJQojAdDbHVzdGVylEsAjAFmlIaUKYl0lIaUXZQojA1Bc0Nh
dGVnb3JpY2FslCmGlIwRQ2F0ZWdvcmllc01hcHBpbmeUXZQojAMwLjCUjAJnMZSGlIwDMS4wlIwC
ZzKUhpSMAzIuMJSMAmczlIaUjAMzLjCUjAJnNJSGlIwDNC4wlIwCZzWUhpRlhZSGlGWMC0NhdGVn
b3JpY2FslCiMCGxvY2F0aW9ulCiMA0JLS5SMB0Jhbmdrb2uUjAZQSFVLRVSUjAZQaHVrZXSUjANi
a2uUdJQpiXSUhpRdlIwRQ2F0ZWdvcmllc01hcHBpbmeUXZQojANCS0uUjAdCYW5na29rlIaUjAdC
YW5na29rlIwHQmFuZ2tva5SGlIwGUEhVS0VUlIwGUGh1a2V0lIaUjAZQaHVrZXSUjAZQaHVrZXSU
hpSMA2Jra5SMB0Jhbmdrb2uUhpRlhZSGlGGMC0NhdGVnb3JpY2FslCiMCGxvY2F0aW9ulCiMA0JL
S5SMB0Jhbmdrb2uUjAZQSFVLRVSUjAZQaHVrZXSUjANia2uUdJQpiHSUhpRdlIwRQ2F0ZWdvcmll
c01hcHBpbmeUXZQoaEyMB0Jhbmdrb2uUhpRoTYwHQmFuZ2tva5SGlGhOjAZQaHVrZXSUhpRoT4wG
UGh1a2V0lIaUaFCMB0Jhbmdrb2uUhpRlhZSGlGF1Sv7///+GlIwWX21lcmdlX2RpYWxvZ19zZXR0
aW5nc5R9lEr8////hpSMDl9zZWxlY3RlZF9pdGVtlIwIbG9jYXRpb26USwCGlEr+////hpSMEW91
dHB1dF90YWJsZV9uYW1llIwAlEr+////hpRoBEsCdYwKYXR0cmlidXRlc5R9lCiMB3RyYW5faWSU
SwKMB2N1c3RfaWSUSwKMCnByb2R1Y3RfaWSUSwGMA3F0eZRLAowFcHJpY2WUSwJoaEsBjARkYXRl
lEsEjApzYWxlcGVyc29ulEsBdYwFbWV0YXOUfZR1YmF1Lg==
</properties>
		<properties node_id="12" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00-\x00\x00\x05\x9f\x00\x00\x03\xb0\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03N', 'scriptLibrary': [{'name': 'get week', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\ndf= table_to_frame(in_data)\n#df = df.drop_duplicates(keep='first')\ndf['week'] = df['date'].dt.isocalendar().week\n#here you go\nout_data = table_from_frame(df)", 'filename': None}, {'name': 'elbow', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\ndf= table_to_frame(in_data)\n#df = df.drop_duplicates(keep='first')\ndf['week'] = df['date'].dt.isocalendar().week\n#here you go\nout_data = table_from_frame(df)", 'filename': None}, {'name': 'warehouse', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\n\nretail= table_to_frame(in_data)\n\nretail['CustomerID'] = retail['CustomerID'].astype(str)\nretail['Amount'] = retail['Quantity']*retail['UnitPrice']\n\nrfm_m = retail.groupby('CustomerID')['Amount'].sum()\nrfm_m = rfm_m.reset_index()\nrfm_f = retail.groupby('CustomerID')['InvoiceNo'].count()\nrfm_f = rfm_f.reset_index()\nrfm_f.columns = ['CustomerID', 'Frequency']\n\nrfm = pd.merge(rfm_m, rfm_f, on='CustomerID', how='inner')\n\nretail['InvoiceDate'] = pd.to_datetime(retail['InvoiceDate'],format='%d-%m-%Y %H:%M')\n\nmax_date = max(retail['InvoiceDate'])\nretail['Diff'] = max_date - retail['InvoiceDate']\nrfm_p = retail.groupby('CustomerID')['Diff'].min()\nrfm_p = rfm_p.reset_index()\nrfm_p['Diff'] = rfm_p['Diff'].dt.days\nrfm = pd.merge(rfm, rfm_p, on='CustomerID', how='inner')\nrfm.columns = ['CustomerID', 'Amount', 'Frequency', 'Recency']\n#here you go\nout_data = table_from_frame(rfm)", 'filename': None}, {'name': 'warehouse2', 'script': "\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import combinations \nfrom sklearn.cluster import KMeans\nimport folium\n\ndata= table_to_frame(in_data)\n# Color options\ncolor_options = {'demand': 'red',\n                 'supply': 'yellow',\n                 'flow': 'black',\n                 'cog': 'blue',\n                 'candidate': 'black',\n                 'other': 'gray'}\n\ndef fun1(x):\n    if x == 'Supply':\n        return 1.0\n    elif x == 'Demand':\n        return 2.0\n    else:\n        return 0\n \ndata['a1'] = data['type'].apply(fun1).astype(np.int64)\ndata['a2'] = data['volume'].astype(np.int64)\n \ndata['cal_vol'] = data['a1']*data['a2']\ndata=data.drop(['a1','a2'], axis=1)\n\ncands = data.loc[data['type'].str.lower()=='candidate']\nlocs = data.loc[data['cal_vol']&gt;0]\n\nprint(cands)\n#print(locs)\nout_data = table_from_frame(data)", 'filename': None}], 'scriptText': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\ndf= table_to_frame(in_data)\n#df = df.drop_duplicates(keep='first')\ndf['week'] = df['date'].dt.isocalendar().week\n#here you go\nout_data = table_from_frame(df)", 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x02\r\x00\x00\x00k\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="13" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="14" format="literal">{'append_source_column': False, 'auto_commit': True, 'controlAreaVisible': True, 'ignore_compute_value': True, 'merge_type': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01\xb1\x00\x00\x00\xb0\x00\x00\x03;\x00\x00\x02T\x00\x00\x01\xb1\x00\x00\x00\xcc\x00\x00\x03;\x00\x00\x02T\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x01\xb1\x00\x00\x00\xcc\x00\x00\x03;\x00\x00\x02T', 'source_attr_name': 'Source ID', 'source_column_role': 0, '__version__': 1}</properties>
		<properties node_id="15" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03L', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
