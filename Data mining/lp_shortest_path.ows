<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script" position="(203.0, 228.0)" />
	</nodes>
	<links />
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 4, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xb1\x00\x00\x00\x8e\x00\x00\x05\xb0\x00\x00\x03v\x00\x00\x00\xb1\x00\x00\x00\xaa\x00\x00\x05\xb0\x00\x00\x03v\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\xb1\x00\x00\x00\xaa\x00\x00\x05\xb0\x00\x00\x03v', 'scriptLibrary': [{'name': 'scrape1', 'script': 'browser = webdriver.Chrome(ChromeDriverManager().install())\n\n#2 define endpoint\nurl = "https://pantip.com/topic/41611639"\n \nbrowser.get(url)\n\n#3. get body element\n\nbody = browser.find_element(By.TAG_NAME,"body")\n\n#4. dynamically score pages\nno_of_pagedowns = 20\n\nwhile no_of_pagedowns:\n    body.send_keys(Keys.PAGE_DOWN)  \n    time.sleep(self.wait)\n    no_of_pagedowns -=1\n\n\n#5. click on all &lt;a class="see-more"&gt;\natags = browser.find_elements(By.CSS_SELECTOR,"a[class = \'see-more\']")\n   \nfor atag in atags:\n    time.sleep(0.5)\n    atag.click()\n\n#6. get page source from webbrowser\n    time.sleep(1)\npage_source = browser.page_source\n\n#7. parse source\ns = BeautifulSoup(page_source,"html.parser")\n\n#8. find all post tag\n\nMyli=s.find_all(\'div\',attrs={\'class\':\'display-post-status-leftside\'})\n\n\n#9. works with each item\nfor num in range(len(Myli)):\n    row={} #make object as dict\n\n    #9.1 comment\n    commentNo           =   Myli[num].find(\'span\',attrs={\'class\':\'display-post-number\'})\n\n    if commentNo is None:\n        continue\n\n    row[\'comment_no\']   =   commentNo.get_text().strip()\n    row[\'post_id\']      =   postId\n    #9.2  \n    ttime               = Myli[num].find(\'abbr\',attrs={\'class\':\'timeago\'})\n    if ttime is not None:\n    row[\'created\']      = ttime[\'data-utime\']\n\n    #8.3  \n    comment             = Myli[num].find(\'div\',attrs={\'class\':\'display-post-story\'})\n    row[\'comment\']      = comment.get_text()\n\n    list1.append(row)\n\n    df=pd.DataFrame(list1)\n\ntable1 = table_from_frame(df)\n', 'filename': None}, {'name': 'industry_sum.py', 'script': 'browser = webdriver.Chrome(ChromeDriverManager().install())\n\n#2 define endpoint\nurl = "https://pantip.com/topic/41611639"\n \nbrowser.get(url)\n\n#3. get body element\n\nbody = browser.find_element(By.TAG_NAME,"body")\n\n#4. dynamically score pages\nno_of_pagedowns = 20\n\nwhile no_of_pagedowns:\n    body.send_keys(Keys.PAGE_DOWN)  \n    time.sleep(self.wait)\n    no_of_pagedowns -=1\n\n\n#5. click on all &lt;a class="see-more"&gt;\natags = browser.find_elements(By.CSS_SELECTOR,"a[class = \'see-more\']")\n   \nfor atag in atags:\n    time.sleep(0.5)\n    atag.click()\n\n#6. get page source from webbrowser\n    time.sleep(1)\npage_source = browser.page_source\n\n#7. parse source\ns = BeautifulSoup(page_source,"html.parser")\n\n#8. find all post tag\n\nMyli=s.find_all(\'div\',attrs={\'class\':\'display-post-status-leftside\'})\n\n\n#9. works with each item\nfor num in range(len(Myli)):\n    row={} #make object as dict\n\n    #9.1 comment\n    commentNo           =   Myli[num].find(\'span\',attrs={\'class\':\'display-post-number\'})\n\n    if commentNo is None:\n        continue\n\n    row[\'comment_no\']   =   commentNo.get_text().strip()\n    row[\'post_id\']      =   postId\n    #9.2  \n    ttime               = Myli[num].find(\'abbr\',attrs={\'class\':\'timeago\'})\n    if ttime is not None:\n    row[\'created\']      = ttime[\'data-utime\']\n\n    #8.3  \n    comment             = Myli[num].find(\'div\',attrs={\'class\':\'display-post-story\'})\n    row[\'comment\']      = comment.get_text()\n\n    list1.append(row)\n\n    df=pd.DataFrame(list1)\n\ntable1 = table_from_frame(df)\n', 'filename': None}, {'name': 'iso.py', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\ndf= table_to_frame(in_data)\n#df = df.drop_duplicates(keep='first')\ndf['week'] = df['date'].dt.isocalendar().week\n#here you go\nout_data = table_from_frame(df)", 'filename': '/Users/mac/work/school/2022-1/dmine/data mining material/python/iso.py'}, {'name': 'project_opt.py', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport pandas as pd\nimport numpy as np\ndf= table_to_frame(in_data)\nprint(df['BUSINESS DEV'])\n#dfc = df.copy()\nOBJ = ['SUSTAINABILITY', 'BUSINESS DEV', 'HSE', 'DIGITAL TRANSFORMATION',\n       'CSR', 'OPERATIONAL EXCELLENCE']\n\nfor COL in OBJ:\n    df[COL] = df['TOTAL']*df[COL].cat.codes\ndf = pd.DataFrame(df[OBJ].sum(axis = 0)/1E6)\n \ndf.reset_index(inplace=True)\ndf.columns = ['MO','BUDGET']\nprint(df.head())\n#here you go\nout_data = table_from_frame(df)\n", 'filename': None}, {'name': 'shortest_route', 'script': "from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport pandas as pd\nimport numpy as np\ndf= table_to_frame(in_data)\nprint(df['BUSINESS DEV'])\n#dfc = df.copy()\nOBJ = ['SUSTAINABILITY', 'BUSINESS DEV', 'HSE', 'DIGITAL TRANSFORMATION',\n       'CSR', 'OPERATIONAL EXCELLENCE']\n\nfor COL in OBJ:\n    df[COL] = df['TOTAL']*df[COL].cat.codes\ndf = pd.DataFrame(df[OBJ].sum(axis = 0)/1E6)\n \ndf.reset_index(inplace=True)\ndf.columns = ['MO','BUDGET']\nprint(df.head())\n#here you go\nout_data = table_from_frame(df)\n", 'filename': None}], 'scriptText': 'from Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport pandas as pd\nimport numpy as np\n#df= table_to_frame(in_data)\nfrom pulp import *   # no need to use pulp object\nimport numpy as np\nrows    = [1,2,3,4,5,6,7,8,9,10]\ncolumns = [1,2,3,4,5,6,7,8,9,10]\nmodel = LpProblem("shortest path problem",LpMinimize)\nx =LpVariable.dicts("x",[(i,j) for i in rows for j in columns] ,lowBound=0, upBound=1, cat="Integer") \nmodel +=   8*x[1,2]  + 13*x[1,3]  + 15*x[1,4]  + 10*x[1,5] + \\\n           5*x[2,3]  + 14*x[2,7]  + \\\n           5*x[3,2]  +  5*x[3,6]  + \\\n           4*x[4,5]  +  2*x[4,3]  + 3*x[4,6] + \\\n           4*x[5,4]  + 12*x[5,9]  + \\\n           3*x[6,4]  +  5*x[6,3]  +  4*x[6,7]  + 2*x[6,8]  + 5*x[6,9] + \\\n          15*x[7,2]  +  4*x[7,6]  +  2*x[7,8]  + 4*x[7,10] + \\\n           2*x[8,6]  +  5*x[8,9]  +  7*x[8,10] + \\\n          12*x[9,5]  +  5*x[9,6]  +  5*x[9,8]  + 5*x[9,10] \n     \n\nmodel += x[1,2]  + x[1,3]  + x[1,4]  + x[1,5]  &gt;=1\nmodel += x[2,3]  + x[2,7]  - x[3,2]  - x[7,2]  - x[1,2] &lt;=0\nmodel += x[3,2]  + x[3,6]  - x[1,3]  - x[2,3]  - x[4,3] - x[6,3] &lt;=0\nmodel += x[4,3]  + x[4,5]  + x[4,6]  - x[1,4]  - x[5,4] - x[6,4] &lt;=0\nmodel += x[5,4]  + x[5,9]  - x[1,5]  - x[4,5]  - x[9,5] &lt;= 0\nmodel += x[6,3]  + x[6,4]  + x[6,7]  + x[6,8]  + x[6,9] - x[3,6] - x[4,6] - x[7,6] - x[8,6] - x[9,6]&lt;=0\nmodel += x[7,2]  + x[7,6]  + x[7,8]  + x[7,10] - x[2,7] - x[6,7] &lt;=0\nmodel += x[8,6]  + x[8,9]  + x[8,10] - x[6,8]  - x[7,8] - x[9,8] &lt;=0\nmodel += x[9,5]  + x[9,6]  + x[9,8]  + x[9,10] - x[5,9] - x[6,9] - x[8,9] &lt;=0\nmodel += x[7,10] + x[8,10] + x[9,10]  &gt;=1\n       \n \nmodel.solve(PULP_CBC_CMD(msg=0))\n#print(model)\nprint("result: {}".format(LpStatus[model.status]))\nfor variable in model.variables():\n    print ("{} = {}".format(variable.name, variable.varValue))\nprint("cost = {}".format(value(model.objective)))   \n#here you go\n#out_data = table_from_frame(df)\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa8\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
